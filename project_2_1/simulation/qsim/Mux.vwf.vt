// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2021 22:45:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] dataIn0;
reg [3:0] dataIn1;
reg [3:0] dataIn2;
reg [3:0] dataIn3;
reg [3:0] dataIn4;
reg [3:0] dataIn5;
reg [3:0] dataIn6;
reg [3:0] dataIn7;
reg [3:0] sel;
// wires                                               
wire [3:0] dataOut;

// assign statements (if any)                          
Mux i1 (
// port map - connection between master ports and signals/registers   
	.dataIn0(dataIn0),
	.dataIn1(dataIn1),
	.dataIn2(dataIn2),
	.dataIn3(dataIn3),
	.dataIn4(dataIn4),
	.dataIn5(dataIn5),
	.dataIn6(dataIn6),
	.dataIn7(dataIn7),
	.dataOut(dataOut),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// dataIn0[ 3 ]
initial
begin
	dataIn0[3] = 1'b0;
end 
// dataIn0[ 2 ]
initial
begin
	dataIn0[2] = 1'b0;
end 
// dataIn0[ 1 ]
initial
begin
	dataIn0[1] = 1'b0;
end 
// dataIn0[ 0 ]
initial
begin
	dataIn0[0] = 1'b0;
end 
// dataIn1[ 3 ]
initial
begin
	dataIn1[3] = 1'b0;
end 
// dataIn1[ 2 ]
initial
begin
	dataIn1[2] = 1'b0;
end 
// dataIn1[ 1 ]
initial
begin
	dataIn1[1] = 1'b0;
end 
// dataIn1[ 0 ]
initial
begin
	dataIn1[0] = 1'b1;
end 
// dataIn2[ 3 ]
initial
begin
	dataIn2[3] = 1'b0;
end 
// dataIn2[ 2 ]
initial
begin
	dataIn2[2] = 1'b0;
end 
// dataIn2[ 1 ]
initial
begin
	dataIn2[1] = 1'b1;
end 
// dataIn2[ 0 ]
initial
begin
	dataIn2[0] = 1'b0;
end 
// dataIn3[ 3 ]
initial
begin
	dataIn3[3] = 1'b0;
end 
// dataIn3[ 2 ]
initial
begin
	dataIn3[2] = 1'b0;
end 
// dataIn3[ 1 ]
initial
begin
	dataIn3[1] = 1'b1;
end 
// dataIn3[ 0 ]
initial
begin
	dataIn3[0] = 1'b1;
end 
// dataIn4[ 3 ]
initial
begin
	dataIn4[3] = 1'b0;
end 
// dataIn4[ 2 ]
initial
begin
	dataIn4[2] = 1'b1;
end 
// dataIn4[ 1 ]
initial
begin
	dataIn4[1] = 1'b0;
end 
// dataIn4[ 0 ]
initial
begin
	dataIn4[0] = 1'b0;
end 
// dataIn5[ 3 ]
initial
begin
	dataIn5[3] = 1'b0;
end 
// dataIn5[ 2 ]
initial
begin
	dataIn5[2] = 1'b1;
end 
// dataIn5[ 1 ]
initial
begin
	dataIn5[1] = 1'b0;
end 
// dataIn5[ 0 ]
initial
begin
	dataIn5[0] = 1'b1;
end 
// dataIn6[ 3 ]
initial
begin
	dataIn6[3] = 1'b0;
end 
// dataIn6[ 2 ]
initial
begin
	dataIn6[2] = 1'b1;
end 
// dataIn6[ 1 ]
initial
begin
	dataIn6[1] = 1'b1;
end 
// dataIn6[ 0 ]
initial
begin
	dataIn6[0] = 1'b0;
end 
// dataIn7[ 3 ]
initial
begin
	dataIn7[3] = 1'b0;
end 
// dataIn7[ 2 ]
initial
begin
	dataIn7[2] = 1'b1;
end 
// dataIn7[ 1 ]
initial
begin
	dataIn7[1] = 1'b1;
end 
// dataIn7[ 0 ]
initial
begin
	dataIn7[0] = 1'b1;
end 
// sel[ 3 ]
initial
begin
	sel[3] = 1'b0;
	sel[3] = #320000 1'b1;
	sel[3] = #320000 1'b0;
	sel[3] = #320000 1'b1;
end 
// sel[ 2 ]
initial
begin
	repeat(3)
	begin
		sel[2] = 1'b0;
		sel[2] = #160000 1'b1;
		# 160000;
	end
	sel[2] = 1'b0;
end 
// sel[ 1 ]
initial
begin
	repeat(6)
	begin
		sel[1] = 1'b0;
		sel[1] = #80000 1'b1;
		# 80000;
	end
	sel[1] = 1'b0;
end 
// sel[ 0 ]
initial
begin
	repeat(12)
	begin
		sel[0] = 1'b0;
		sel[0] = #40000 1'b1;
		# 40000;
	end
	sel[0] = 1'b0;
end 
endmodule

